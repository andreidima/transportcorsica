<?php

namespace App\Http\Controllers;

use App\Models\Rezervare;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

use Netopia\Payment\Address;
use Netopia\Payment\Invoice;
use Netopia\Payment\Request\Card;
use Netopia\Payment\Request\Notify;
use Netopia\Payment\Request\PaymentAbstract;

// use Illuminate\Support\Facades\Redirect;

class PlataOnlineController extends Controller
{
    /**
     * all payment requests will be sent to the NETOPIA Payments server
     * SANDBOX : http://sandboxsecure.mobilpay.ro
     * LIVE : https://secure.mobilpay.ro
     */
    public $paymentUrl;
    /**
     * NETOPIA Payments is working only with Certificate. Each NETOPIA partner (merchant) has a certificate.
     * From your Admin panel you can download the Certificate.
     * is located in Admin -> Conturi de comerciant -> Detalii -> Setari securitate
     * the var $x509FilePath is path of your certificate in your platform
     * i.e: /home/certificates/public.cer
     */
    public $x509FilePath;
    /**
     * Billing Address
     */
    public $billingAddress;
    /**
     * Shipping Address
     */
    public $shippingAddress;


    /**
     * Variabile pentru raspuns
     */
    public $errorCode;
    public $errorType;
    public $errorMessage;   

    
    public function trimitereCatrePlata(Request $request, Rezervare $rezervare_tur)
    {
        // dd($request, $rezervare_tur, $rezervare->pasageri_relation->first);
        $this->paymentUrl   = config('mobilpay.payment_url', '');
        $this->x509FilePath = config('mobilpay.public_key_path', '');
        try {
            $paymentRequest = new Card();
            $paymentRequest->signature  = config('mobilpay.merchant_id', '');//signature - generated by mobilpay.ro for every merchant account
            $paymentRequest->orderId    = md5(uniqid(rand())); // order_id should be unique for a merchant account
            $paymentRequest->confirmUrl = config('mobilpay.confirm_url', ''); // is where mobilPay redirects the client once the payment process is finished and is MANDATORY
            $paymentRequest->returnUrl  = config('mobilpay.return_url', '');;// is where mobilPay will send the payment result and is MANDATORY

            /*
             * Adaugarea de campuri proprii in cererea de plata
             */
            $paymentRequest->params = array (
                // 'var1'=>$val1,
                // 'var2'=>$val2
                'rezervare_id'=> $rezervare_tur->id
            );

            /*
             * Invoices info
             */
            $paymentRequest->invoice = new Invoice();
            $paymentRequest->invoice->currency  = 'RON';
            $paymentRequest->invoice->amount    = $rezervare_tur->pret_total + (($rezervare_tur->retur) ? Rezervare::find($rezervare_tur->retur)->pret_total : 0);
            $paymentRequest->invoice->tokenId   = null;
            $paymentRequest->invoice->details   = "Plata din www.rezervari.transportcorsica.ro";

            /*
             * Billing Info
             */
            $this->billingAddress = new Address();
            $this->billingAddress->type         = "person"; //should be "person" / "company"
            $this->billingAddress->firstName    = $rezervare_tur->pasageri_relation->first()->nume ?? '';
            $this->billingAddress->lastName     = "";
            $this->billingAddress->address      = $rezervare_tur->oras_plecare_nume->oras ?? '';
            $this->billingAddress->email        = $rezervare_tur->email ?? '';
            $this->billingAddress->mobilePhone  = $rezervare_tur->telefon ?? '';
            $paymentRequest->invoice->setBillingAddress($this->billingAddress);

            /*
             * Shipping
             */
            $this->shippingAddress = new Address();
            $this->shippingAddress->type        = "person"; //should be "person" / "company"
            $this->shippingAddress->firstName   = $rezervare_tur->pasageri_relation->first()->nume ?? '';
            $this->shippingAddress->lastName    = "";
            $this->shippingAddress->address     = $rezervare_tur->oras_plecare_nume->oras ?? '';
            $this->shippingAddress->email       = $rezervare_tur->email ?? '';
            $this->shippingAddress->mobilePhone = $rezervare_tur->telefon ?? '';
            $paymentRequest->invoice->setShippingAddress($this->shippingAddress);

            /*
             * encrypting
             */
            $paymentRequest->encrypt($this->x509FilePath);

            /**
             * send the following data to NETOPIA Payments server
             * Method : POST
             * URL : $paymentUrl
             */
            $EnvKey = $paymentRequest->getEnvKey();
            $data   = $paymentRequest->getEncData();


            $paymentUrl = $this->paymentUrl;
            return view('plata-online.redirect', compact('paymentUrl', 'EnvKey', 'data'));
            
        }catch (\Exception $e)
        {
            return "Oops, There is a problem!";
        }
    }      
    
    public function confirmarePlata()
    {    
        $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_NONE;
        $this->errorCode = 0;
        $this->errorMessage = '';

        $this->paymentUrl = config('mobilpay.payment_url', '');
        $this->x509FilePath = config('mobilpay.private_key_path', '');

        /**
         * Salvarea in baza de date a faptului ca s-a incercat plata
         */
        DB::table('rezervari')->where('id', $paymentRequestIpn->params['rezervare_id'])->update(['plata_efectuata' => 0]); 

        if (strcasecmp($_SERVER['REQUEST_METHOD'], 'post') == 0){
            if(isset($_POST['env_key']) && isset($_POST['data'])){
                try {
                    $paymentRequestIpn = PaymentAbstract::factoryFromEncrypted($_POST['env_key'],$_POST['data'],$this->x509FilePath);
                    $rrn = $paymentRequestIpn->objPmNotify->rrn;                  

                    if ($paymentRequestIpn->objPmNotify->errorCode == 0) {
                        switch($paymentRequestIpn->objPmNotify->action){
                            case 'confirmed':
                                //update DB, SET status = "confirmed/captured"
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                $mesaj_personalizat = 'Tranzacția a fost efectuată';

                                /**
                                 * Salvarea in baza de date a faptului ca plata initiata a fost finalizata cu succes.
                                 */
                                DB::table('rezervari')->where('id', $paymentRequestIpn->params['rezervare_id'])->update(['plata_efectuata' => 1]); 

                                break;
                            case 'confirmed_pending':
                                //update DB, SET status = "pending"
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                $mesaj_personalizat = 'Tranzacția este în curs de revizuire. După acest lucru, o nouă solicitare IPN va fi trimisă fie cu confirmare, fie cu anulare (confirmed_pending)';
                                break;
                            case 'paid_pending':
                                //update DB, SET status = "pending"
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                $mesaj_personalizat = 'Tranzacția este în curs de revizuire. După acest lucru, o nouă solicitare IPN va fi trimisă fie cu confirmare, fie cu anulare (paid_pending)';
                                break;
                            case 'paid':
                                //update DB, SET status = "open/preauthorized"
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                $mesaj_personalizat = 'Tranzacția este în curs de autorizare. După acest lucru, o nouă solicitare IPN va fi trimisă fie cu confirmare, fie cu anulare (paid)';
                                break;
                            case 'canceled':
                                //update DB, SET status = "canceled"
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                $mesaj_personalizat = 'Tranzacția a fost anulată';
                                break;
                            case 'credit':
                                //update DB, SET status = "refunded"
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                $mesaj_personalizat = 'Tranzacția a fost rambursată';
                                break;
                            default:
                                $errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
                                $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_ACTION;
                                $this->errorMessage = 'mobilpay_refference_action paramaters is invalid';
                                $mesaj_personalizat = $this->errorMessage;
                        }
                    }else{
                        //update DB, SET status = "rejected"
                        $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                        $mesaj_personalizat = 'Tranzacția a fost respinsă';
                    }
                }catch (\Exception $e) {
                    $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_TEMPORARY;
                    $this->errorCode = $e->getCode();
                    $this->errorMessage = $e->getMessage();
                    $mesaj_personalizat = $this->errorMessage;
    }

            }else{
                $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
                $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_POST_PARAMETERS;
                $this->errorMessag = 'mobilpay.ro posted invalid parameters';
                $mesaj_personalizat = $this->errorMessag;
            }

        } else {
            $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
            $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_POST_METHOD;
            $this->errorMessage = 'invalid request metod for payment confirmation';
            $mesaj_personalizat = $this->errorMessage;
        }

        /**
         * Communicate with NETOPIA Payments server
         */

        header('Content-type: application/xml');
        echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
        if($this->errorCode == 0)
        {
            echo "<crc>{$this->errorMessage}</crc>";
        }
        else
        {
            echo "<crc error_type=\"{$this->errorType}\" error_code=\"{$this->errorCode}\">{$this->errorMessage}</crc>";
        }

        /**
         * Salvare in baza de date a datelor despre plata online
         */
        DB::table('plata_online')->insert([
            'order_id' => $paymentRequestIpn->orderId ?? '',
            'action' => $paymentRequestIpn->objPmNotify->action ?? '',
            'error_code' => $this->errorCode ?? '',
            'error_message' => $this->errorMessage ?? '',
            'mesaj_personalizat' => $mesaj_personalizat ?? '',
            'notify_date' => $paymentRequestIpn->timestamp ?? '',
            'original_amount' => $paymentRequestIpn->invoice->originalAmount ?? '',
            'processed_amount' => $paymentRequestIpn->invoice->processedAmount ?? '',
            'rezervare_id' => $paymentRequestIpn->params['rezervare_id'] ?? '',
            'nume' => $paymentRequestIpn->objPmNotify->customer->firstName ?? '' . $paymentRequestIpn->objPmNotify->customer->lastName,
            'telefon' => $paymentRequestIpn->objPmNotify->customer->mobilePhone ?? '',
            'email' => $paymentRequestIpn->objPmNotify->customer->email ?? '',
            'adresa' => $paymentRequestIpn->objPmNotify->customer->address ?? '',
            'created_at' => \Carbon\Carbon::now(),
            'updated_at' => \Carbon\Carbon::now(),
            // 'text' => json_encode($paymentRequestIpn) ?? '',
        ]);                   

        /**
         * Ce contine $paymentRequestIpn (raspunsul de la Netopia)
         */
            // "invoice":
            //     {
            //         "currency":"RON",
            //         "amount":"1.00",
            //         "details":"Payment Via Composer library",
            //         "installments":null,
            //         "selectedInstallments":null,
            //         "tokenId":null,
            //         "promotionCode":null
            //     },
            // "signature":"GM51-DR9M-KDM8-QXVT-JNRQ",
            // "service":null,
            // "orderId":"55a6b3643568786a6787bd7d27573028",
            // "timestamp":null,
            // "type":"card",
            // "objPmNotify":
            //     {
            //         "purchaseId":"1164943",
            //         "action":"confirmed",
            //         "errorCode":"0",
            //         "errorMessage":"Tranzactia aprobata",
            //         "timestamp":"20201214165239",
            //         "originalAmount":"1.00",
            //         "processedAmount":"1.00",
            //         "promotionAmount":null,
            //         "pan_masked":"9****5098",
            //         "token_id":null,
            //         "token_expiration_date":null,
            //         "customer_id":null,
            //         "customer_type":null,
            //         "customer":
            //             {
            //                 "type":"person",
            //                 "firstName":"Billing name",
            //                 "lastName":"Billing LastName",
            //                 "address":"Bulevardul Ion Creang\u0103, Nr 00",
            //                 "email":"test@billing.com",
            //                 "mobilePhone":"0732123456"
            //             },
            //         "issuer":null,
            //         "paidByPhone":null,
            //         "validationCode":null,
            //         "installments":null,
            //         "rrn":"9991607",
            //         "current_payment_count":"1",
            //         "paymentInstrumentId":"41667",
            //         "discounts":[],
            //         "params":[]
            //     },
            // "returnUrl":"https:\/\/rezervari.transportcorsica.ro\/adauga-rezervare-pasul-3",
            // "confirmUrl":"https:\/\/rezervari.transportcorsica.ro\/confirmare-plata",
            // "params":
            //     {
            //         "rezervare_id":"6"
            //     },
            // "objReqNotify":null
    }
}
